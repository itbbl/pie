# -*- coding: utf-8 -*-

from odoo import api ,fields, models,exceptions

from datetime import date,datetime,timedelta
from dateutil.relativedelta import relativedelta
from odoo.exceptions import ValidationError
import logging
from datetime import datetime as dt
_logger = logging.getLogger(__name__)
class sharing_request(models.Model):
    _name = "pie.share.sharing_request"
    _inherit = ['mail.thread', 'ir.needaction_mixin']
    name=fields.Char('Contact Person',size=150 )
    active = fields.Boolean('Active', default=True)
    developer = fields.Many2one('pie.entity',string="Supplier",store=True)
    #developer_open = fields.Many2one('pie.entity',string="Supplier",domain="['&',('type','=','is_supplier'),('type_inventory','=','open_inventory')]")
    contract_sign_start_date = fields.Date(string="Contract Start Date")
    contract_sign_end_date = fields.Date(string="Contract End Date")
    status = fields.Selection([('Expired', 'Expired'), ('Pending', 'Pending'),('Disable','Disable'),('Enable','Enable'),('Renewal','Renewal'),('Rejected','Rejected'),('Approved','Approved')]
    ,default='Pending')
    is_pending=fields.Boolean('is_pending',default=True)
    no_contract=fields.Boolean('No Contract',default=False)
    broker_id=fields.Integer(related='developer.id')
    open_inventory=fields.Boolean('Open Inventory',default=False)
    #broker_id=fields.related('developer', 'sharesrequest__ids', type='many2one', string='Currency', relation="res.entity")
    """@api.constrains('no_contract')
    def remove_date_(self):
     for rec in self:
      if rec.no_contract==True:
       rec.update({
       'contract_sign_start_date':null,
       'contract_sign_end_date':null

       
       })
    """

    @api.multi
    @api.constrains('contract_sign_end_date', 'contract_sign_start_date')
    def date_constrains(self):

        if not self.contract_sign_start_date and self.contract_sign_end_date and self.no_contract==False:
            raise ValidationError('Sorry, Enter Start Date...')
        elif not self.contract_sign_end_date and self.contract_sign_start_date and self.no_contract==False:
            raise ValidationError('Sorry, Enter End Date...')
        elif self.contract_sign_start_date==self.contract_sign_end_date and self.no_contract==False and  self.contract_sign_start_date  :
         raise ValidationError('Contract Period is greater than Zero  ')
            
        for rec in self:
            if rec.contract_sign_end_date < rec.contract_sign_start_date:
                raise exceptions.ValidationError('Sorry, End Date Must be greater Than Start Date...')
    def action_reject(self):
     self.update({
        'status':'Rejected',
        'is_pending':False
        })
    
    def action_confirm(self):
   
         
        self.update({
        'status':'Approved',
        'is_pending':False
        })
        """if self.contract_sign_end_date:
            self.update({


            'contract_sign_end_date':(datetime.strptime(self.contract_sign_end_date, '%Y-%m-%d')+timedelta(days=365)).strftime('%Y-%m-%d')


            })
             """
            
 
    def  action_approve(self):
        
        self.update({
        'status':'Renewal',
        'is_pending':True,
        

        })
    def action_enable(self):
     self.update({
        'status':'Approved',
         
        

        })
    def action_enable_broker(self):
     self.update({
        'status':'Enable',
         
        

        })

    def action_disable(self):
     self.update({
        'status':'Disable',
         
        

        })

    """@api.one
    @api.depends('contract_sign_end_date')
    def Change_date_expired(self):
      
     _logger.info('SSSSSSSSSSSSS: ' + type(self.contract_sign_end_date))
          
     records=self.env['pie.share.sharing_request'].search([])
     for rec in records:
       
      if datetime.strptime(rec.contract_sign_end_date, '%Y-%m-%d')>=datetime.now():
       rec.update({
        'status':'Expired',
        'is_pending':False
        })"""
    @api.constrains('developer')
    def _duplicate_name(self):
        broker_admin=self.env['res.users'].search([('id','=',self.env.uid)])
        self.broker_id=broker_admin.entity_id
        request_user=self.env['pie.share.sharing_request'].search([('create_uid','=',self.env.uid)])
        new_period='' 
        if  self.contract_sign_start_date and   self.contract_sign_end_date:
            new_period=datetime.strptime(self.contract_sign_end_date, '%Y-%m-%d')-datetime.strptime(self.contract_sign_start_date, '%Y-%m-%d')
        checked=False    
        for rec in request_user:
            if rec.developer==self.developer and rec.id!=self.id :
                if  rec.contract_sign_start_date and   rec.contract_sign_end_date :
                    old_period=datetime.strptime(rec.contract_sign_end_date, '%Y-%m-%d')-datetime.strptime(rec.contract_sign_start_date, '%Y-%m-%d')
                     
                    
                    if old_period==new_period :
                        raise ValidationError('Error:supplier submitted before in the same Contract Date. ')
                    
                     

                if not rec.status=='Rejected' and not rec.status=='Expired' :
                 raise ValidationError('Error :supplier  sent new request before ....')
                if rec.status=='Expired' :
                 self.update({
                          
                         'status':'Renewal',
                          
                         'is_pending':False
                         })
    @api.onchange('developer','open_inventory')
    def _change_domain(self):
     
     if self.open_inventory==True:
      self.status='Enable'
      
      return {'domain':{'developer':[('type_inventory','=','open_inventory')]}} 
     else:
       
      return {'domain':{'developer':[('type_inventory','=','Control_inventory')]}} 


class inherited_entity(models.Model):
 _inherit='pie.entity'
 broker_shared_request=fields.One2many('pie.share.sharing_request','broker_id',store=True)
